def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, arg1)
    var17 = func4(arg2, var7)
    var22 = func5(arg1, var12)
    var29 = var25(arg2, var17)
    var30 = arg1 & -123 - var12
    result = var30 | var12 | (var17 + 1957264958 | arg2) - var22
    return result
def func8(arg26, arg27):
    var28 = (1694604032 + -401633245) | arg26
    result = (var28 & (439180827 - arg26 ^ 578 & arg26)) - 20 & (-517 + -832)
    return result
def func7():
    closure = [1]
    def func6(arg23, arg24):
        closure[0] += func8(arg23, arg24)
        return closure[0]
    func = func6
    return func
var25 = func7()
def func5(arg18, arg19):
    var20 = 0
    for var21 in range(31):
        var20 += arg19 & var21 & -9
    return var20
def func4(arg13, arg14):
    var15 = 0
    for var16 in range(18):
        var15 += arg13 - (4 - arg13)
    return var15
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(48):
        var10 += 0 ^ -6 + -7
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(43):
        var5 += var6 + (var5 - arg3)
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
